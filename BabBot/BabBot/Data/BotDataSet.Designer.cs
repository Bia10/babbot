//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BabBot.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BotDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BotDataSet : global::System.Data.DataSet {
        
        private ContinentListDataTable tableContinentList;
        
        private ZoneListDataTable tableZoneList;
        
        private ZoneServicesDataTable tableZoneServices;
        
        private ServiceTypesDataTable tableServiceTypes;
        
        private QuestListDataTable tableQuestList;
        
        private QuestItemsDataTable tableQuestItems;
        
        private QuestItemTypeDataTable tableQuestItemType;
        
        private GameObjectsDataTable tableGameObjects;
        
        private GameObjectTypesDataTable tableGameObjectTypes;
        
        private NpcServicesDataTable tableNpcServices;
        
        private CoordinatesDataTable tableCoordinates;
        
        private CoordinatesZoneDataTable tableCoordinatesZone;
        
        private global::System.Data.DataRelation relationFK_ZoneList_ZoneServices;
        
        private global::System.Data.DataRelation relationFK_GameObjects_QuestList;
        
        private global::System.Data.DataRelation relationFK_QuestList_QuestItems;
        
        private global::System.Data.DataRelation relationFK_GameObjectTypes_GameObjects;
        
        private global::System.Data.DataRelation relationFK_ZoneList_GameObjects;
        
        private global::System.Data.DataRelation relationFK_GameObjects_NpcServices;
        
        private global::System.Data.DataRelation relationFK_ServiceTypes_NpcServices;
        
        private global::System.Data.DataRelation relationFK_CoordinatesZone_Coordinates;
        
        private global::System.Data.DataRelation relationFK_GameObjects_CoordinatesZone;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BotDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BotDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.ExcludeSchema)) {
                    this.InitExpressions();
                }
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ContinentList"] != null)) {
                    base.Tables.Add(new ContinentListDataTable(ds.Tables["ContinentList"]));
                }
                if ((ds.Tables["ZoneList"] != null)) {
                    base.Tables.Add(new ZoneListDataTable(ds.Tables["ZoneList"]));
                }
                if ((ds.Tables["ZoneServices"] != null)) {
                    base.Tables.Add(new ZoneServicesDataTable(ds.Tables["ZoneServices"]));
                }
                if ((ds.Tables["ServiceTypes"] != null)) {
                    base.Tables.Add(new ServiceTypesDataTable(ds.Tables["ServiceTypes"]));
                }
                if ((ds.Tables["QuestList"] != null)) {
                    base.Tables.Add(new QuestListDataTable(ds.Tables["QuestList"]));
                }
                if ((ds.Tables["QuestItems"] != null)) {
                    base.Tables.Add(new QuestItemsDataTable(ds.Tables["QuestItems"]));
                }
                if ((ds.Tables["QuestItemType"] != null)) {
                    base.Tables.Add(new QuestItemTypeDataTable(ds.Tables["QuestItemType"]));
                }
                if ((ds.Tables["GameObjects"] != null)) {
                    base.Tables.Add(new GameObjectsDataTable(ds.Tables["GameObjects"]));
                }
                if ((ds.Tables["GameObjectTypes"] != null)) {
                    base.Tables.Add(new GameObjectTypesDataTable(ds.Tables["GameObjectTypes"]));
                }
                if ((ds.Tables["NpcServices"] != null)) {
                    base.Tables.Add(new NpcServicesDataTable(ds.Tables["NpcServices"]));
                }
                if ((ds.Tables["Coordinates"] != null)) {
                    base.Tables.Add(new CoordinatesDataTable(ds.Tables["Coordinates"]));
                }
                if ((ds.Tables["CoordinatesZone"] != null)) {
                    base.Tables.Add(new CoordinatesZoneDataTable(ds.Tables["CoordinatesZone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.InitExpressions();
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContinentListDataTable ContinentList {
            get {
                return this.tableContinentList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZoneListDataTable ZoneList {
            get {
                return this.tableZoneList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZoneServicesDataTable ZoneServices {
            get {
                return this.tableZoneServices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceTypesDataTable ServiceTypes {
            get {
                return this.tableServiceTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestListDataTable QuestList {
            get {
                return this.tableQuestList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestItemsDataTable QuestItems {
            get {
                return this.tableQuestItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuestItemTypeDataTable QuestItemType {
            get {
                return this.tableQuestItemType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GameObjectsDataTable GameObjects {
            get {
                return this.tableGameObjects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GameObjectTypesDataTable GameObjectTypes {
            get {
                return this.tableGameObjectTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NpcServicesDataTable NpcServices {
            get {
                return this.tableNpcServices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoordinatesDataTable Coordinates {
            get {
                return this.tableCoordinates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CoordinatesZoneDataTable CoordinatesZone {
            get {
                return this.tableCoordinatesZone;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BotDataSet cln = ((BotDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ContinentList"] != null)) {
                    base.Tables.Add(new ContinentListDataTable(ds.Tables["ContinentList"]));
                }
                if ((ds.Tables["ZoneList"] != null)) {
                    base.Tables.Add(new ZoneListDataTable(ds.Tables["ZoneList"]));
                }
                if ((ds.Tables["ZoneServices"] != null)) {
                    base.Tables.Add(new ZoneServicesDataTable(ds.Tables["ZoneServices"]));
                }
                if ((ds.Tables["ServiceTypes"] != null)) {
                    base.Tables.Add(new ServiceTypesDataTable(ds.Tables["ServiceTypes"]));
                }
                if ((ds.Tables["QuestList"] != null)) {
                    base.Tables.Add(new QuestListDataTable(ds.Tables["QuestList"]));
                }
                if ((ds.Tables["QuestItems"] != null)) {
                    base.Tables.Add(new QuestItemsDataTable(ds.Tables["QuestItems"]));
                }
                if ((ds.Tables["QuestItemType"] != null)) {
                    base.Tables.Add(new QuestItemTypeDataTable(ds.Tables["QuestItemType"]));
                }
                if ((ds.Tables["GameObjects"] != null)) {
                    base.Tables.Add(new GameObjectsDataTable(ds.Tables["GameObjects"]));
                }
                if ((ds.Tables["GameObjectTypes"] != null)) {
                    base.Tables.Add(new GameObjectTypesDataTable(ds.Tables["GameObjectTypes"]));
                }
                if ((ds.Tables["NpcServices"] != null)) {
                    base.Tables.Add(new NpcServicesDataTable(ds.Tables["NpcServices"]));
                }
                if ((ds.Tables["Coordinates"] != null)) {
                    base.Tables.Add(new CoordinatesDataTable(ds.Tables["Coordinates"]));
                }
                if ((ds.Tables["CoordinatesZone"] != null)) {
                    base.Tables.Add(new CoordinatesZoneDataTable(ds.Tables["CoordinatesZone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableContinentList = ((ContinentListDataTable)(base.Tables["ContinentList"]));
            if ((initTable == true)) {
                if ((this.tableContinentList != null)) {
                    this.tableContinentList.InitVars();
                }
            }
            this.tableZoneList = ((ZoneListDataTable)(base.Tables["ZoneList"]));
            if ((initTable == true)) {
                if ((this.tableZoneList != null)) {
                    this.tableZoneList.InitVars();
                }
            }
            this.tableZoneServices = ((ZoneServicesDataTable)(base.Tables["ZoneServices"]));
            if ((initTable == true)) {
                if ((this.tableZoneServices != null)) {
                    this.tableZoneServices.InitVars();
                }
            }
            this.tableServiceTypes = ((ServiceTypesDataTable)(base.Tables["ServiceTypes"]));
            if ((initTable == true)) {
                if ((this.tableServiceTypes != null)) {
                    this.tableServiceTypes.InitVars();
                }
            }
            this.tableQuestList = ((QuestListDataTable)(base.Tables["QuestList"]));
            if ((initTable == true)) {
                if ((this.tableQuestList != null)) {
                    this.tableQuestList.InitVars();
                }
            }
            this.tableQuestItems = ((QuestItemsDataTable)(base.Tables["QuestItems"]));
            if ((initTable == true)) {
                if ((this.tableQuestItems != null)) {
                    this.tableQuestItems.InitVars();
                }
            }
            this.tableQuestItemType = ((QuestItemTypeDataTable)(base.Tables["QuestItemType"]));
            if ((initTable == true)) {
                if ((this.tableQuestItemType != null)) {
                    this.tableQuestItemType.InitVars();
                }
            }
            this.tableGameObjects = ((GameObjectsDataTable)(base.Tables["GameObjects"]));
            if ((initTable == true)) {
                if ((this.tableGameObjects != null)) {
                    this.tableGameObjects.InitVars();
                }
            }
            this.tableGameObjectTypes = ((GameObjectTypesDataTable)(base.Tables["GameObjectTypes"]));
            if ((initTable == true)) {
                if ((this.tableGameObjectTypes != null)) {
                    this.tableGameObjectTypes.InitVars();
                }
            }
            this.tableNpcServices = ((NpcServicesDataTable)(base.Tables["NpcServices"]));
            if ((initTable == true)) {
                if ((this.tableNpcServices != null)) {
                    this.tableNpcServices.InitVars();
                }
            }
            this.tableCoordinates = ((CoordinatesDataTable)(base.Tables["Coordinates"]));
            if ((initTable == true)) {
                if ((this.tableCoordinates != null)) {
                    this.tableCoordinates.InitVars();
                }
            }
            this.tableCoordinatesZone = ((CoordinatesZoneDataTable)(base.Tables["CoordinatesZone"]));
            if ((initTable == true)) {
                if ((this.tableCoordinatesZone != null)) {
                    this.tableCoordinatesZone.InitVars();
                }
            }
            this.relationFK_ZoneList_ZoneServices = this.Relations["FK_ZoneList_ZoneServices"];
            this.relationFK_GameObjects_QuestList = this.Relations["FK_GameObjects_QuestList"];
            this.relationFK_QuestList_QuestItems = this.Relations["FK_QuestList_QuestItems"];
            this.relationFK_GameObjectTypes_GameObjects = this.Relations["FK_GameObjectTypes_GameObjects"];
            this.relationFK_ZoneList_GameObjects = this.Relations["FK_ZoneList_GameObjects"];
            this.relationFK_GameObjects_NpcServices = this.Relations["FK_GameObjects_NpcServices"];
            this.relationFK_ServiceTypes_NpcServices = this.Relations["FK_ServiceTypes_NpcServices"];
            this.relationFK_CoordinatesZone_Coordinates = this.Relations["FK_CoordinatesZone_Coordinates"];
            this.relationFK_GameObjects_CoordinatesZone = this.Relations["FK_GameObjects_CoordinatesZone"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BotDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BotDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableContinentList = new ContinentListDataTable();
            base.Tables.Add(this.tableContinentList);
            this.tableZoneList = new ZoneListDataTable();
            base.Tables.Add(this.tableZoneList);
            this.tableZoneServices = new ZoneServicesDataTable();
            base.Tables.Add(this.tableZoneServices);
            this.tableServiceTypes = new ServiceTypesDataTable();
            base.Tables.Add(this.tableServiceTypes);
            this.tableQuestList = new QuestListDataTable();
            base.Tables.Add(this.tableQuestList);
            this.tableQuestItems = new QuestItemsDataTable();
            base.Tables.Add(this.tableQuestItems);
            this.tableQuestItemType = new QuestItemTypeDataTable();
            base.Tables.Add(this.tableQuestItemType);
            this.tableGameObjects = new GameObjectsDataTable();
            base.Tables.Add(this.tableGameObjects);
            this.tableGameObjectTypes = new GameObjectTypesDataTable();
            base.Tables.Add(this.tableGameObjectTypes);
            this.tableNpcServices = new NpcServicesDataTable();
            base.Tables.Add(this.tableNpcServices);
            this.tableCoordinates = new CoordinatesDataTable(false);
            base.Tables.Add(this.tableCoordinates);
            this.tableCoordinatesZone = new CoordinatesZoneDataTable();
            base.Tables.Add(this.tableCoordinatesZone);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ContinentList_ZoneList", new global::System.Data.DataColumn[] {
                        this.tableContinentList.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableZoneList.CIDColumn});
            this.tableZoneList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ZoneServices_ServiceTypes", new global::System.Data.DataColumn[] {
                        this.tableServiceTypes.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableZoneServices.SERVICE_IDColumn});
            this.tableZoneServices.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ZoneList_ZoneServices", new global::System.Data.DataColumn[] {
                        this.tableZoneList.NAMEColumn}, new global::System.Data.DataColumn[] {
                        this.tableZoneServices.ZONE_NAMEColumn});
            this.tableZoneServices.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_GameObjects_QuestList", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuestList.OBJECT_IDColumn});
            this.tableQuestList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_QuestList_QuestItems", new global::System.Data.DataColumn[] {
                        this.tableQuestList.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuestItems.QIDColumn});
            this.tableQuestItems.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_QuestItemType_QuestItems", new global::System.Data.DataColumn[] {
                        this.tableQuestItemType.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuestItems.ITEM_TYPE_IDColumn});
            this.tableQuestItems.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_GameObjectTypes_GameObjects", new global::System.Data.DataColumn[] {
                        this.tableGameObjectTypes.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGameObjects.TYPE_IDColumn});
            this.tableGameObjects.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ZoneList_GameObjects", new global::System.Data.DataColumn[] {
                        this.tableZoneList.NAMEColumn}, new global::System.Data.DataColumn[] {
                        this.tableGameObjects.ZONE_NAMEColumn});
            this.tableGameObjects.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_GameObjects_NpcServices", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableNpcServices.GIDColumn});
            this.tableNpcServices.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ServiceTypes_NpcServices", new global::System.Data.DataColumn[] {
                        this.tableServiceTypes.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableNpcServices.SERVICE_IDColumn});
            this.tableNpcServices.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_CoordinatesZone_Coordinates", new global::System.Data.DataColumn[] {
                        this.tableCoordinatesZone.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinates.ZONE_IDColumn});
            this.tableCoordinates.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_ZoneList_CoordinatesZone", new global::System.Data.DataColumn[] {
                        this.tableZoneList.NAMEColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinatesZone.ZONE_NAMEColumn});
            this.tableCoordinatesZone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.None;
            fkc.UpdateRule = global::System.Data.Rule.None;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_GameObjects_CoordinatesZone", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinatesZone.GIDColumn});
            this.tableCoordinatesZone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.None;
            this.relationFK_ZoneList_ZoneServices = new global::System.Data.DataRelation("FK_ZoneList_ZoneServices", new global::System.Data.DataColumn[] {
                        this.tableZoneList.NAMEColumn}, new global::System.Data.DataColumn[] {
                        this.tableZoneServices.ZONE_NAMEColumn}, false);
            this.Relations.Add(this.relationFK_ZoneList_ZoneServices);
            this.relationFK_GameObjects_QuestList = new global::System.Data.DataRelation("FK_GameObjects_QuestList", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuestList.OBJECT_IDColumn}, false);
            this.Relations.Add(this.relationFK_GameObjects_QuestList);
            this.relationFK_QuestList_QuestItems = new global::System.Data.DataRelation("FK_QuestList_QuestItems", new global::System.Data.DataColumn[] {
                        this.tableQuestList.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableQuestItems.QIDColumn}, false);
            this.Relations.Add(this.relationFK_QuestList_QuestItems);
            this.relationFK_GameObjectTypes_GameObjects = new global::System.Data.DataRelation("FK_GameObjectTypes_GameObjects", new global::System.Data.DataColumn[] {
                        this.tableGameObjectTypes.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGameObjects.TYPE_IDColumn}, false);
            this.Relations.Add(this.relationFK_GameObjectTypes_GameObjects);
            this.relationFK_ZoneList_GameObjects = new global::System.Data.DataRelation("FK_ZoneList_GameObjects", new global::System.Data.DataColumn[] {
                        this.tableZoneList.NAMEColumn}, new global::System.Data.DataColumn[] {
                        this.tableGameObjects.ZONE_NAMEColumn}, false);
            this.Relations.Add(this.relationFK_ZoneList_GameObjects);
            this.relationFK_GameObjects_NpcServices = new global::System.Data.DataRelation("FK_GameObjects_NpcServices", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableNpcServices.GIDColumn}, false);
            this.Relations.Add(this.relationFK_GameObjects_NpcServices);
            this.relationFK_ServiceTypes_NpcServices = new global::System.Data.DataRelation("FK_ServiceTypes_NpcServices", new global::System.Data.DataColumn[] {
                        this.tableServiceTypes.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableNpcServices.SERVICE_IDColumn}, false);
            this.Relations.Add(this.relationFK_ServiceTypes_NpcServices);
            this.relationFK_CoordinatesZone_Coordinates = new global::System.Data.DataRelation("FK_CoordinatesZone_Coordinates", new global::System.Data.DataColumn[] {
                        this.tableCoordinatesZone.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinates.ZONE_IDColumn}, false);
            this.Relations.Add(this.relationFK_CoordinatesZone_Coordinates);
            this.relationFK_GameObjects_CoordinatesZone = new global::System.Data.DataRelation("FK_GameObjects_CoordinatesZone", new global::System.Data.DataColumn[] {
                        this.tableGameObjects.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCoordinatesZone.GIDColumn}, false);
            this.Relations.Add(this.relationFK_GameObjects_CoordinatesZone);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContinentList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZoneList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZoneServices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServiceTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuestList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuestItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuestItemType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGameObjects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGameObjectTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNpcServices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoordinates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCoordinatesZone() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BotDataSet ds = new BotDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Coordinates.COORDColumn.Expression = "X + \' | \' + Y +\' | \' + Z";
        }
        
        public delegate void ContinentListRowChangeEventHandler(object sender, ContinentListRowChangeEvent e);
        
        public delegate void ZoneListRowChangeEventHandler(object sender, ZoneListRowChangeEvent e);
        
        public delegate void ZoneServicesRowChangeEventHandler(object sender, ZoneServicesRowChangeEvent e);
        
        public delegate void ServiceTypesRowChangeEventHandler(object sender, ServiceTypesRowChangeEvent e);
        
        public delegate void QuestListRowChangeEventHandler(object sender, QuestListRowChangeEvent e);
        
        public delegate void QuestItemsRowChangeEventHandler(object sender, QuestItemsRowChangeEvent e);
        
        public delegate void QuestItemTypeRowChangeEventHandler(object sender, QuestItemTypeRowChangeEvent e);
        
        public delegate void GameObjectsRowChangeEventHandler(object sender, GameObjectsRowChangeEvent e);
        
        public delegate void GameObjectTypesRowChangeEventHandler(object sender, GameObjectTypesRowChangeEvent e);
        
        public delegate void NpcServicesRowChangeEventHandler(object sender, NpcServicesRowChangeEvent e);
        
        public delegate void CoordinatesRowChangeEventHandler(object sender, CoordinatesRowChangeEvent e);
        
        public delegate void CoordinatesZoneRowChangeEventHandler(object sender, CoordinatesZoneRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContinentListDataTable : global::System.Data.TypedTableBase<ContinentListRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListDataTable() {
                this.TableName = "ContinentList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContinentListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContinentListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRow this[int index] {
                get {
                    return ((ContinentListRow)(this.Rows[index]));
                }
            }
            
            public event ContinentListRowChangeEventHandler ContinentListRowChanging;
            
            public event ContinentListRowChangeEventHandler ContinentListRowChanged;
            
            public event ContinentListRowChangeEventHandler ContinentListRowDeleting;
            
            public event ContinentListRowChangeEventHandler ContinentListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContinentListRow(ContinentListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRow AddContinentListRow(int ID, string NAME) {
                ContinentListRow rowContinentListRow = ((ContinentListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        NAME};
                rowContinentListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContinentListRow);
                return rowContinentListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRow FindByID(int ID) {
                return ((ContinentListRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContinentListDataTable cln = ((ContinentListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContinentListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("CONTINENT_LISTKey1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNAME}, false));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRow NewContinentListRow() {
                return ((ContinentListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContinentListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContinentListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContinentListRowChanged != null)) {
                    this.ContinentListRowChanged(this, new ContinentListRowChangeEvent(((ContinentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContinentListRowChanging != null)) {
                    this.ContinentListRowChanging(this, new ContinentListRowChangeEvent(((ContinentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContinentListRowDeleted != null)) {
                    this.ContinentListRowDeleted(this, new ContinentListRowChangeEvent(((ContinentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContinentListRowDeleting != null)) {
                    this.ContinentListRowDeleting(this, new ContinentListRowChangeEvent(((ContinentListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContinentListRow(ContinentListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContinentListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZoneListDataTable : global::System.Data.TypedTableBase<ZoneListRow> {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnCID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListDataTable() {
                this.TableName = "ZoneList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZoneListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow this[int index] {
                get {
                    return ((ZoneListRow)(this.Rows[index]));
                }
            }
            
            public event ZoneListRowChangeEventHandler ZoneListRowChanging;
            
            public event ZoneListRowChangeEventHandler ZoneListRowChanged;
            
            public event ZoneListRowChangeEventHandler ZoneListRowDeleting;
            
            public event ZoneListRowChangeEventHandler ZoneListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZoneListRow(ZoneListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow AddZoneListRow(string NAME, int CID) {
                ZoneListRow rowZoneListRow = ((ZoneListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        CID};
                rowZoneListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZoneListRow);
                return rowZoneListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow FindByNAME(string NAME) {
                return ((ZoneListRow)(this.Rows.Find(new object[] {
                            NAME})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ZoneListDataTable cln = ((ZoneListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZoneListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnCID = base.Columns["CID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnCID = new global::System.Data.DataColumn("CID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnNAME}, true));
                this.columnNAME.AutoIncrementSeed = -1;
                this.columnNAME.AutoIncrementStep = -1;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.Unique = true;
                this.columnCID.AllowDBNull = false;
                this.columnCID.Caption = "ID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow NewZoneListRow() {
                return ((ZoneListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZoneListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ZoneListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZoneListRowChanged != null)) {
                    this.ZoneListRowChanged(this, new ZoneListRowChangeEvent(((ZoneListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZoneListRowChanging != null)) {
                    this.ZoneListRowChanging(this, new ZoneListRowChangeEvent(((ZoneListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZoneListRowDeleted != null)) {
                    this.ZoneListRowDeleted(this, new ZoneListRowChangeEvent(((ZoneListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZoneListRowDeleting != null)) {
                    this.ZoneListRowDeleting(this, new ZoneListRowChangeEvent(((ZoneListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZoneListRow(ZoneListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZoneListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZoneServicesDataTable : global::System.Data.TypedTableBase<ZoneServicesRow> {
            
            private global::System.Data.DataColumn columnZONE_NAME;
            
            private global::System.Data.DataColumn columnSERVICE_ID;
            
            private global::System.Data.DataColumn columnNPC_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesDataTable() {
                this.TableName = "ZoneServices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneServicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZoneServicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_NAMEColumn {
                get {
                    return this.columnZONE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_IDColumn {
                get {
                    return this.columnSERVICE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NPC_NAMEColumn {
                get {
                    return this.columnNPC_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRow this[int index] {
                get {
                    return ((ZoneServicesRow)(this.Rows[index]));
                }
            }
            
            public event ZoneServicesRowChangeEventHandler ZoneServicesRowChanging;
            
            public event ZoneServicesRowChangeEventHandler ZoneServicesRowChanged;
            
            public event ZoneServicesRowChangeEventHandler ZoneServicesRowDeleting;
            
            public event ZoneServicesRowChangeEventHandler ZoneServicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZoneServicesRow(ZoneServicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRow AddZoneServicesRow(ZoneListRow parentZoneListRowByFK_ZoneList_ZoneServices, int SERVICE_ID, string NPC_NAME) {
                ZoneServicesRow rowZoneServicesRow = ((ZoneServicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SERVICE_ID,
                        NPC_NAME};
                if ((parentZoneListRowByFK_ZoneList_ZoneServices != null)) {
                    columnValuesArray[0] = parentZoneListRowByFK_ZoneList_ZoneServices[0];
                }
                rowZoneServicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZoneServicesRow);
                return rowZoneServicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ZoneServicesDataTable cln = ((ZoneServicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZoneServicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZONE_NAME = base.Columns["ZONE_NAME"];
                this.columnSERVICE_ID = base.Columns["SERVICE_ID"];
                this.columnNPC_NAME = base.Columns["NPC_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZONE_NAME = new global::System.Data.DataColumn("ZONE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_NAME);
                this.columnSERVICE_ID = new global::System.Data.DataColumn("SERVICE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_ID);
                this.columnNPC_NAME = new global::System.Data.DataColumn("NPC_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNPC_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNPC_NAME}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnSERVICE_ID}, false));
                this.columnSERVICE_ID.Unique = true;
                this.columnNPC_NAME.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRow NewZoneServicesRow() {
                return ((ZoneServicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZoneServicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ZoneServicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZoneServicesRowChanged != null)) {
                    this.ZoneServicesRowChanged(this, new ZoneServicesRowChangeEvent(((ZoneServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZoneServicesRowChanging != null)) {
                    this.ZoneServicesRowChanging(this, new ZoneServicesRowChangeEvent(((ZoneServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZoneServicesRowDeleted != null)) {
                    this.ZoneServicesRowDeleted(this, new ZoneServicesRowChangeEvent(((ZoneServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZoneServicesRowDeleting != null)) {
                    this.ZoneServicesRowDeleting(this, new ZoneServicesRowChangeEvent(((ZoneServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZoneServicesRow(ZoneServicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZoneServicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceTypesDataTable : global::System.Data.TypedTableBase<ServiceTypesRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesDataTable() {
                this.TableName = "ServiceTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow this[int index] {
                get {
                    return ((ServiceTypesRow)(this.Rows[index]));
                }
            }
            
            public event ServiceTypesRowChangeEventHandler ServiceTypesRowChanging;
            
            public event ServiceTypesRowChangeEventHandler ServiceTypesRowChanged;
            
            public event ServiceTypesRowChangeEventHandler ServiceTypesRowDeleting;
            
            public event ServiceTypesRowChangeEventHandler ServiceTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceTypesRow(ServiceTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow AddServiceTypesRow(int ID, string NAME) {
                ServiceTypesRow rowServiceTypesRow = ((ServiceTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        NAME};
                rowServiceTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceTypesRow);
                return rowServiceTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow FindByID(int ID) {
                return ((ServiceTypesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceTypesDataTable cln = ((ServiceTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnNAME}, false));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow NewServiceTypesRow() {
                return ((ServiceTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceTypesRowChanged != null)) {
                    this.ServiceTypesRowChanged(this, new ServiceTypesRowChangeEvent(((ServiceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceTypesRowChanging != null)) {
                    this.ServiceTypesRowChanging(this, new ServiceTypesRowChangeEvent(((ServiceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceTypesRowDeleted != null)) {
                    this.ServiceTypesRowDeleted(this, new ServiceTypesRowChangeEvent(((ServiceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceTypesRowDeleting != null)) {
                    this.ServiceTypesRowDeleting(this, new ServiceTypesRowChangeEvent(((ServiceTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceTypesRow(ServiceTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuestListDataTable : global::System.Data.TypedTableBase<QuestListRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnOBJECT_ID;
            
            private global::System.Data.DataColumn columnTITLE;
            
            private global::System.Data.DataColumn columnGREETING_TEXT;
            
            private global::System.Data.DataColumn columnOBJECTIVES_TEXT;
            
            private global::System.Data.DataColumn columnSTART_FROM;
            
            private global::System.Data.DataColumn columnDELIVER_TO;
            
            private global::System.Data.DataColumn columnLEVEL;
            
            private global::System.Data.DataColumn columnLINK;
            
            private global::System.Data.DataColumn columnBONUS_SPELL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListDataTable() {
                this.TableName = "QuestList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuestListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OBJECT_IDColumn {
                get {
                    return this.columnOBJECT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GREETING_TEXTColumn {
                get {
                    return this.columnGREETING_TEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OBJECTIVES_TEXTColumn {
                get {
                    return this.columnOBJECTIVES_TEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn START_FROMColumn {
                get {
                    return this.columnSTART_FROM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DELIVER_TOColumn {
                get {
                    return this.columnDELIVER_TO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEVELColumn {
                get {
                    return this.columnLEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINKColumn {
                get {
                    return this.columnLINK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BONUS_SPELLColumn {
                get {
                    return this.columnBONUS_SPELL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow this[int index] {
                get {
                    return ((QuestListRow)(this.Rows[index]));
                }
            }
            
            public event QuestListRowChangeEventHandler QuestListRowChanging;
            
            public event QuestListRowChangeEventHandler QuestListRowChanged;
            
            public event QuestListRowChangeEventHandler QuestListRowDeleting;
            
            public event QuestListRowChangeEventHandler QuestListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuestListRow(QuestListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow AddQuestListRow(int ID, GameObjectsRow parentGameObjectsRowByFK_GameObjects_QuestList, string TITLE, string GREETING_TEXT, string OBJECTIVES_TEXT, string START_FROM, string DELIVER_TO, int LEVEL, string LINK, string BONUS_SPELL) {
                QuestListRow rowQuestListRow = ((QuestListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        null,
                        TITLE,
                        GREETING_TEXT,
                        OBJECTIVES_TEXT,
                        START_FROM,
                        DELIVER_TO,
                        LEVEL,
                        LINK,
                        BONUS_SPELL};
                if ((parentGameObjectsRowByFK_GameObjects_QuestList != null)) {
                    columnValuesArray[1] = parentGameObjectsRowByFK_GameObjects_QuestList[0];
                }
                rowQuestListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuestListRow);
                return rowQuestListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow FindByID(int ID) {
                return ((QuestListRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuestListDataTable cln = ((QuestListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuestListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnOBJECT_ID = base.Columns["OBJECT_ID"];
                this.columnTITLE = base.Columns["TITLE"];
                this.columnGREETING_TEXT = base.Columns["GREETING_TEXT"];
                this.columnOBJECTIVES_TEXT = base.Columns["OBJECTIVES_TEXT"];
                this.columnSTART_FROM = base.Columns["START_FROM"];
                this.columnDELIVER_TO = base.Columns["DELIVER_TO"];
                this.columnLEVEL = base.Columns["LEVEL"];
                this.columnLINK = base.Columns["LINK"];
                this.columnBONUS_SPELL = base.Columns["BONUS_SPELL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnOBJECT_ID = new global::System.Data.DataColumn("OBJECT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJECT_ID);
                this.columnTITLE = new global::System.Data.DataColumn("TITLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLE);
                this.columnGREETING_TEXT = new global::System.Data.DataColumn("GREETING_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGREETING_TEXT);
                this.columnOBJECTIVES_TEXT = new global::System.Data.DataColumn("OBJECTIVES_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJECTIVES_TEXT);
                this.columnSTART_FROM = new global::System.Data.DataColumn("START_FROM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTART_FROM);
                this.columnDELIVER_TO = new global::System.Data.DataColumn("DELIVER_TO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELIVER_TO);
                this.columnLEVEL = new global::System.Data.DataColumn("LEVEL", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEVEL);
                this.columnLINK = new global::System.Data.DataColumn("LINK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINK);
                this.columnBONUS_SPELL = new global::System.Data.DataColumn("BONUS_SPELL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBONUS_SPELL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnOBJECT_ID}, false));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnOBJECT_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow NewQuestListRow() {
                return ((QuestListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuestListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuestListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestListRowChanged != null)) {
                    this.QuestListRowChanged(this, new QuestListRowChangeEvent(((QuestListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestListRowChanging != null)) {
                    this.QuestListRowChanging(this, new QuestListRowChangeEvent(((QuestListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestListRowDeleted != null)) {
                    this.QuestListRowDeleted(this, new QuestListRowChangeEvent(((QuestListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestListRowDeleting != null)) {
                    this.QuestListRowDeleting(this, new QuestListRowChangeEvent(((QuestListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuestListRow(QuestListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuestItemsDataTable : global::System.Data.TypedTableBase<QuestItemsRow> {
            
            private global::System.Data.DataColumn columnQID;
            
            private global::System.Data.DataColumn columnIDX;
            
            private global::System.Data.DataColumn columnITEM_TYPE_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnQTY;
            
            private global::System.Data.DataColumn columnFULL_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsDataTable() {
                this.TableName = "QuestItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuestItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QIDColumn {
                get {
                    return this.columnQID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDXColumn {
                get {
                    return this.columnIDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_TYPE_IDColumn {
                get {
                    return this.columnITEM_TYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTYColumn {
                get {
                    return this.columnQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FULL_NAMEColumn {
                get {
                    return this.columnFULL_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow this[int index] {
                get {
                    return ((QuestItemsRow)(this.Rows[index]));
                }
            }
            
            public event QuestItemsRowChangeEventHandler QuestItemsRowChanging;
            
            public event QuestItemsRowChangeEventHandler QuestItemsRowChanged;
            
            public event QuestItemsRowChangeEventHandler QuestItemsRowDeleting;
            
            public event QuestItemsRowChangeEventHandler QuestItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuestItemsRow(QuestItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow AddQuestItemsRow(QuestListRow parentQuestListRowByFK_QuestList_QuestItems, int IDX, int ITEM_TYPE_ID, string NAME, int QTY, string FULL_NAME) {
                QuestItemsRow rowQuestItemsRow = ((QuestItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        IDX,
                        ITEM_TYPE_ID,
                        NAME,
                        QTY,
                        FULL_NAME};
                if ((parentQuestListRowByFK_QuestList_QuestItems != null)) {
                    columnValuesArray[0] = parentQuestListRowByFK_QuestList_QuestItems[0];
                }
                rowQuestItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuestItemsRow);
                return rowQuestItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow FindByITEM_TYPE_IDIDXQID(int ITEM_TYPE_ID, int IDX, int QID) {
                return ((QuestItemsRow)(this.Rows.Find(new object[] {
                            ITEM_TYPE_ID,
                            IDX,
                            QID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuestItemsDataTable cln = ((QuestItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuestItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnQID = base.Columns["QID"];
                this.columnIDX = base.Columns["IDX"];
                this.columnITEM_TYPE_ID = base.Columns["ITEM_TYPE_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnQTY = base.Columns["QTY"];
                this.columnFULL_NAME = base.Columns["FULL_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnQID = new global::System.Data.DataColumn("QID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQID);
                this.columnIDX = new global::System.Data.DataColumn("IDX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDX);
                this.columnITEM_TYPE_ID = new global::System.Data.DataColumn("ITEM_TYPE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_TYPE_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnQTY = new global::System.Data.DataColumn("QTY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTY);
                this.columnFULL_NAME = new global::System.Data.DataColumn("FULL_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFULL_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnITEM_TYPE_ID,
                                this.columnIDX,
                                this.columnQID}, true));
                this.columnQID.AllowDBNull = false;
                this.columnIDX.AllowDBNull = false;
                this.columnITEM_TYPE_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow NewQuestItemsRow() {
                return ((QuestItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuestItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuestItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestItemsRowChanged != null)) {
                    this.QuestItemsRowChanged(this, new QuestItemsRowChangeEvent(((QuestItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestItemsRowChanging != null)) {
                    this.QuestItemsRowChanging(this, new QuestItemsRowChangeEvent(((QuestItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestItemsRowDeleted != null)) {
                    this.QuestItemsRowDeleted(this, new QuestItemsRowChangeEvent(((QuestItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestItemsRowDeleting != null)) {
                    this.QuestItemsRowDeleting(this, new QuestItemsRowChangeEvent(((QuestItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuestItemsRow(QuestItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuestItemTypeDataTable : global::System.Data.TypedTableBase<QuestItemTypeRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeDataTable() {
                this.TableName = "QuestItemType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestItemTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuestItemTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRow this[int index] {
                get {
                    return ((QuestItemTypeRow)(this.Rows[index]));
                }
            }
            
            public event QuestItemTypeRowChangeEventHandler QuestItemTypeRowChanging;
            
            public event QuestItemTypeRowChangeEventHandler QuestItemTypeRowChanged;
            
            public event QuestItemTypeRowChangeEventHandler QuestItemTypeRowDeleting;
            
            public event QuestItemTypeRowChangeEventHandler QuestItemTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuestItemTypeRow(QuestItemTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRow AddQuestItemTypeRow(int ID, string TYPE) {
                QuestItemTypeRow rowQuestItemTypeRow = ((QuestItemTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        TYPE};
                rowQuestItemTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQuestItemTypeRow);
                return rowQuestItemTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRow FindByID(int ID) {
                return ((QuestItemTypeRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QuestItemTypeDataTable cln = ((QuestItemTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QuestItemTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTYPE = base.Columns["TYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTYPE}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnTYPE.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRow NewQuestItemTypeRow() {
                return ((QuestItemTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QuestItemTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QuestItemTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuestItemTypeRowChanged != null)) {
                    this.QuestItemTypeRowChanged(this, new QuestItemTypeRowChangeEvent(((QuestItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuestItemTypeRowChanging != null)) {
                    this.QuestItemTypeRowChanging(this, new QuestItemTypeRowChangeEvent(((QuestItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuestItemTypeRowDeleted != null)) {
                    this.QuestItemTypeRowDeleted(this, new QuestItemTypeRowChangeEvent(((QuestItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuestItemTypeRowDeleting != null)) {
                    this.QuestItemTypeRowDeleting(this, new QuestItemTypeRowChangeEvent(((QuestItemTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuestItemTypeRow(QuestItemTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuestItemTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GameObjectsDataTable : global::System.Data.TypedTableBase<GameObjectsRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTYPE_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnZONE_NAME;
            
            private global::System.Data.DataColumn columnFACTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsDataTable() {
                this.TableName = "GameObjects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GameObjectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GameObjectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPE_IDColumn {
                get {
                    return this.columnTYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_NAMEColumn {
                get {
                    return this.columnZONE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FACTIONColumn {
                get {
                    return this.columnFACTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow this[int index] {
                get {
                    return ((GameObjectsRow)(this.Rows[index]));
                }
            }
            
            public event GameObjectsRowChangeEventHandler GameObjectsRowChanging;
            
            public event GameObjectsRowChangeEventHandler GameObjectsRowChanged;
            
            public event GameObjectsRowChangeEventHandler GameObjectsRowDeleting;
            
            public event GameObjectsRowChangeEventHandler GameObjectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGameObjectsRow(GameObjectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow AddGameObjectsRow(GameObjectTypesRow parentGameObjectTypesRowByFK_GameObjectTypes_GameObjects, string NAME, ZoneListRow parentZoneListRowByFK_ZoneList_GameObjects, string FACTION) {
                GameObjectsRow rowGameObjectsRow = ((GameObjectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        NAME,
                        null,
                        FACTION};
                if ((parentGameObjectTypesRowByFK_GameObjectTypes_GameObjects != null)) {
                    columnValuesArray[1] = parentGameObjectTypesRowByFK_GameObjectTypes_GameObjects[0];
                }
                if ((parentZoneListRowByFK_ZoneList_GameObjects != null)) {
                    columnValuesArray[3] = parentZoneListRowByFK_ZoneList_GameObjects[0];
                }
                rowGameObjectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGameObjectsRow);
                return rowGameObjectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow FindByID(int ID) {
                return ((GameObjectsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GameObjectsDataTable cln = ((GameObjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GameObjectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTYPE_ID = base.Columns["TYPE_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnZONE_NAME = base.Columns["ZONE_NAME"];
                this.columnFACTION = base.Columns["FACTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTYPE_ID = new global::System.Data.DataColumn("TYPE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnZONE_NAME = new global::System.Data.DataColumn("ZONE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_NAME);
                this.columnFACTION = new global::System.Data.DataColumn("FACTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFACTION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnNAME}, false));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnNAME.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow NewGameObjectsRow() {
                return ((GameObjectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GameObjectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GameObjectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GameObjectsRowChanged != null)) {
                    this.GameObjectsRowChanged(this, new GameObjectsRowChangeEvent(((GameObjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GameObjectsRowChanging != null)) {
                    this.GameObjectsRowChanging(this, new GameObjectsRowChangeEvent(((GameObjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GameObjectsRowDeleted != null)) {
                    this.GameObjectsRowDeleted(this, new GameObjectsRowChangeEvent(((GameObjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GameObjectsRowDeleting != null)) {
                    this.GameObjectsRowDeleting(this, new GameObjectsRowChangeEvent(((GameObjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGameObjectsRow(GameObjectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GameObjectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GameObjectTypesDataTable : global::System.Data.TypedTableBase<GameObjectTypesRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesDataTable() {
                this.TableName = "GameObjectTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GameObjectTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GameObjectTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow this[int index] {
                get {
                    return ((GameObjectTypesRow)(this.Rows[index]));
                }
            }
            
            public event GameObjectTypesRowChangeEventHandler GameObjectTypesRowChanging;
            
            public event GameObjectTypesRowChangeEventHandler GameObjectTypesRowChanged;
            
            public event GameObjectTypesRowChangeEventHandler GameObjectTypesRowDeleting;
            
            public event GameObjectTypesRowChangeEventHandler GameObjectTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGameObjectTypesRow(GameObjectTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow AddGameObjectTypesRow(int ID, string TYPE) {
                GameObjectTypesRow rowGameObjectTypesRow = ((GameObjectTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        TYPE};
                rowGameObjectTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGameObjectTypesRow);
                return rowGameObjectTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow FindByID(int ID) {
                return ((GameObjectTypesRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GameObjectTypesDataTable cln = ((GameObjectTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GameObjectTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTYPE = base.Columns["TYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTYPE}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint2", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnTYPE.AllowDBNull = false;
                this.columnTYPE.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow NewGameObjectTypesRow() {
                return ((GameObjectTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GameObjectTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GameObjectTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GameObjectTypesRowChanged != null)) {
                    this.GameObjectTypesRowChanged(this, new GameObjectTypesRowChangeEvent(((GameObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GameObjectTypesRowChanging != null)) {
                    this.GameObjectTypesRowChanging(this, new GameObjectTypesRowChangeEvent(((GameObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GameObjectTypesRowDeleted != null)) {
                    this.GameObjectTypesRowDeleted(this, new GameObjectTypesRowChangeEvent(((GameObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GameObjectTypesRowDeleting != null)) {
                    this.GameObjectTypesRowDeleting(this, new GameObjectTypesRowChangeEvent(((GameObjectTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGameObjectTypesRow(GameObjectTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GameObjectTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NpcServicesDataTable : global::System.Data.TypedTableBase<NpcServicesRow> {
            
            private global::System.Data.DataColumn columnGID;
            
            private global::System.Data.DataColumn columnSERVICE_ID;
            
            private global::System.Data.DataColumn columnSERVICE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesDataTable() {
                this.TableName = "NpcServices";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NpcServicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NpcServicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIDColumn {
                get {
                    return this.columnGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_IDColumn {
                get {
                    return this.columnSERVICE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICE_NAMEColumn {
                get {
                    return this.columnSERVICE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow this[int index] {
                get {
                    return ((NpcServicesRow)(this.Rows[index]));
                }
            }
            
            public event NpcServicesRowChangeEventHandler NpcServicesRowChanging;
            
            public event NpcServicesRowChangeEventHandler NpcServicesRowChanged;
            
            public event NpcServicesRowChangeEventHandler NpcServicesRowDeleting;
            
            public event NpcServicesRowChangeEventHandler NpcServicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNpcServicesRow(NpcServicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow AddNpcServicesRow(GameObjectsRow parentGameObjectsRowByFK_GameObjects_NpcServices, ServiceTypesRow parentServiceTypesRowByFK_ServiceTypes_NpcServices, string SERVICE_NAME) {
                NpcServicesRow rowNpcServicesRow = ((NpcServicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        SERVICE_NAME};
                if ((parentGameObjectsRowByFK_GameObjects_NpcServices != null)) {
                    columnValuesArray[0] = parentGameObjectsRowByFK_GameObjects_NpcServices[0];
                }
                if ((parentServiceTypesRowByFK_ServiceTypes_NpcServices != null)) {
                    columnValuesArray[1] = parentServiceTypesRowByFK_ServiceTypes_NpcServices[0];
                }
                rowNpcServicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNpcServicesRow);
                return rowNpcServicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NpcServicesDataTable cln = ((NpcServicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NpcServicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGID = base.Columns["GID"];
                this.columnSERVICE_ID = base.Columns["SERVICE_ID"];
                this.columnSERVICE_NAME = base.Columns["SERVICE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGID = new global::System.Data.DataColumn("GID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGID);
                this.columnSERVICE_ID = new global::System.Data.DataColumn("SERVICE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_ID);
                this.columnSERVICE_NAME = new global::System.Data.DataColumn("SERVICE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICE_NAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow NewNpcServicesRow() {
                return ((NpcServicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NpcServicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NpcServicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NpcServicesRowChanged != null)) {
                    this.NpcServicesRowChanged(this, new NpcServicesRowChangeEvent(((NpcServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NpcServicesRowChanging != null)) {
                    this.NpcServicesRowChanging(this, new NpcServicesRowChangeEvent(((NpcServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NpcServicesRowDeleted != null)) {
                    this.NpcServicesRowDeleted(this, new NpcServicesRowChangeEvent(((NpcServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NpcServicesRowDeleting != null)) {
                    this.NpcServicesRowDeleting(this, new NpcServicesRowChangeEvent(((NpcServicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNpcServicesRow(NpcServicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NpcServicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoordinatesDataTable : global::System.Data.TypedTableBase<CoordinatesRow> {
            
            private global::System.Data.DataColumn columnZONE_ID;
            
            private global::System.Data.DataColumn columnX;
            
            private global::System.Data.DataColumn columnY;
            
            private global::System.Data.DataColumn columnZ;
            
            private global::System.Data.DataColumn columnCOORD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesDataTable(bool initExpressions) {
                this.TableName = "Coordinates";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoordinatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_IDColumn {
                get {
                    return this.columnZONE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZColumn {
                get {
                    return this.columnZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COORDColumn {
                get {
                    return this.columnCOORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow this[int index] {
                get {
                    return ((CoordinatesRow)(this.Rows[index]));
                }
            }
            
            public event CoordinatesRowChangeEventHandler CoordinatesRowChanging;
            
            public event CoordinatesRowChangeEventHandler CoordinatesRowChanged;
            
            public event CoordinatesRowChangeEventHandler CoordinatesRowDeleting;
            
            public event CoordinatesRowChangeEventHandler CoordinatesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoordinatesRow(CoordinatesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow AddCoordinatesRow(CoordinatesZoneRow parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates, decimal X, decimal Y, decimal Z, string COORD) {
                CoordinatesRow rowCoordinatesRow = ((CoordinatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        X,
                        Y,
                        Z,
                        COORD};
                if ((parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates != null)) {
                    columnValuesArray[0] = parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates[0];
                }
                rowCoordinatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoordinatesRow);
                return rowCoordinatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow AddCoordinatesRow(CoordinatesZoneRow parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates, decimal X, decimal Y, decimal Z) {
                CoordinatesRow rowCoordinatesRow = ((CoordinatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        X,
                        Y,
                        Z,
                        null};
                if ((parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates != null)) {
                    columnValuesArray[0] = parentCoordinatesZoneRowByFK_CoordinatesZone_Coordinates[0];
                }
                rowCoordinatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoordinatesRow);
                return rowCoordinatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoordinatesDataTable cln = ((CoordinatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoordinatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZONE_ID = base.Columns["ZONE_ID"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
                this.columnZ = base.Columns["Z"];
                this.columnCOORD = base.Columns["COORD"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZONE_ID = new global::System.Data.DataColumn("ZONE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_ID);
                this.columnX = new global::System.Data.DataColumn("X", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columnY = new global::System.Data.DataColumn("Y", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnY);
                this.columnZ = new global::System.Data.DataColumn("Z", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZ);
                this.columnCOORD = new global::System.Data.DataColumn("COORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOORD);
                this.columnZONE_ID.AllowDBNull = false;
                this.columnCOORD.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow NewCoordinatesRow() {
                return ((CoordinatesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoordinatesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoordinatesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.COORDColumn.Expression = "X + \' | \' + Y +\' | \' + Z";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoordinatesRowChanged != null)) {
                    this.CoordinatesRowChanged(this, new CoordinatesRowChangeEvent(((CoordinatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoordinatesRowChanging != null)) {
                    this.CoordinatesRowChanging(this, new CoordinatesRowChangeEvent(((CoordinatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoordinatesRowDeleted != null)) {
                    this.CoordinatesRowDeleted(this, new CoordinatesRowChangeEvent(((CoordinatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoordinatesRowDeleting != null)) {
                    this.CoordinatesRowDeleting(this, new CoordinatesRowChangeEvent(((CoordinatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoordinatesRow(CoordinatesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoordinatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CoordinatesZoneDataTable : global::System.Data.TypedTableBase<CoordinatesZoneRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnGID;
            
            private global::System.Data.DataColumn columnZONE_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneDataTable() {
                this.TableName = "CoordinatesZone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinatesZoneDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CoordinatesZoneDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GIDColumn {
                get {
                    return this.columnGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZONE_NAMEColumn {
                get {
                    return this.columnZONE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow this[int index] {
                get {
                    return ((CoordinatesZoneRow)(this.Rows[index]));
                }
            }
            
            public event CoordinatesZoneRowChangeEventHandler CoordinatesZoneRowChanging;
            
            public event CoordinatesZoneRowChangeEventHandler CoordinatesZoneRowChanged;
            
            public event CoordinatesZoneRowChangeEventHandler CoordinatesZoneRowDeleting;
            
            public event CoordinatesZoneRowChangeEventHandler CoordinatesZoneRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCoordinatesZoneRow(CoordinatesZoneRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow AddCoordinatesZoneRow(GameObjectsRow parentGameObjectsRowByFK_GameObjects_CoordinatesZone, string ZONE_NAME) {
                CoordinatesZoneRow rowCoordinatesZoneRow = ((CoordinatesZoneRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ZONE_NAME};
                if ((parentGameObjectsRowByFK_GameObjects_CoordinatesZone != null)) {
                    columnValuesArray[1] = parentGameObjectsRowByFK_GameObjects_CoordinatesZone[0];
                }
                rowCoordinatesZoneRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCoordinatesZoneRow);
                return rowCoordinatesZoneRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow FindByID(int ID) {
                return ((CoordinatesZoneRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CoordinatesZoneDataTable cln = ((CoordinatesZoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CoordinatesZoneDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGID = base.Columns["GID"];
                this.columnZONE_NAME = base.Columns["ZONE_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGID = new global::System.Data.DataColumn("GID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGID);
                this.columnZONE_NAME = new global::System.Data.DataColumn("ZONE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZONE_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow NewCoordinatesZoneRow() {
                return ((CoordinatesZoneRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CoordinatesZoneRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CoordinatesZoneRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CoordinatesZoneRowChanged != null)) {
                    this.CoordinatesZoneRowChanged(this, new CoordinatesZoneRowChangeEvent(((CoordinatesZoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CoordinatesZoneRowChanging != null)) {
                    this.CoordinatesZoneRowChanging(this, new CoordinatesZoneRowChangeEvent(((CoordinatesZoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CoordinatesZoneRowDeleted != null)) {
                    this.CoordinatesZoneRowDeleted(this, new CoordinatesZoneRowChangeEvent(((CoordinatesZoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CoordinatesZoneRowDeleting != null)) {
                    this.CoordinatesZoneRowDeleting(this, new CoordinatesZoneRowChangeEvent(((CoordinatesZoneRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCoordinatesZoneRow(CoordinatesZoneRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BotDataSet ds = new BotDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CoordinatesZoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContinentListRow : global::System.Data.DataRow {
            
            private ContinentListDataTable tableContinentList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContinentListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContinentList = ((ContinentListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableContinentList.IDColumn]));
                }
                set {
                    this[this.tableContinentList.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableContinentList.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ContinentList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContinentList.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableContinentList.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableContinentList.NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZoneListRow : global::System.Data.DataRow {
            
            private ZoneListDataTable tableZoneList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZoneList = ((ZoneListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableZoneList.NAMEColumn]));
                }
                set {
                    this[this.tableZoneList.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CID {
                get {
                    return ((int)(this[this.tableZoneList.CIDColumn]));
                }
                set {
                    this[this.tableZoneList.CIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow[] GetGameObjectsRows() {
                if ((this.Table.ChildRelations["FK_ZoneList_GameObjects"] == null)) {
                    return new GameObjectsRow[0];
                }
                else {
                    return ((GameObjectsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ZoneList_GameObjects"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRow[] GetZoneServicesRows() {
                if ((this.Table.ChildRelations["FK_ZoneList_ZoneServices"] == null)) {
                    return new ZoneServicesRow[0];
                }
                else {
                    return ((ZoneServicesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ZoneList_ZoneServices"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZoneServicesRow : global::System.Data.DataRow {
            
            private ZoneServicesDataTable tableZoneServices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneServicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZoneServices = ((ZoneServicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableZoneServices.ZONE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_NAME\' in table \'ZoneServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneServices.ZONE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SERVICE_ID {
                get {
                    try {
                        return ((int)(this[this.tableZoneServices.SERVICE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_ID\' in table \'ZoneServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneServices.SERVICE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NPC_NAME {
                get {
                    try {
                        return ((string)(this[this.tableZoneServices.NPC_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NPC_NAME\' in table \'ZoneServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZoneServices.NPC_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow ZoneListRow {
                get {
                    return ((ZoneListRow)(this.GetParentRow(this.Table.ParentRelations["FK_ZoneList_ZoneServices"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ZoneList_ZoneServices"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_NAMENull() {
                return this.IsNull(this.tableZoneServices.ZONE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_NAMENull() {
                this[this.tableZoneServices.ZONE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_IDNull() {
                return this.IsNull(this.tableZoneServices.SERVICE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_IDNull() {
                this[this.tableZoneServices.SERVICE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNPC_NAMENull() {
                return this.IsNull(this.tableZoneServices.NPC_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNPC_NAMENull() {
                this[this.tableZoneServices.NPC_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceTypesRow : global::System.Data.DataRow {
            
            private ServiceTypesDataTable tableServiceTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceTypes = ((ServiceTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableServiceTypes.IDColumn]));
                }
                set {
                    this[this.tableServiceTypes.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableServiceTypes.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ServiceTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceTypes.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableServiceTypes.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableServiceTypes.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow[] GetNpcServicesRows() {
                if ((this.Table.ChildRelations["FK_ServiceTypes_NpcServices"] == null)) {
                    return new NpcServicesRow[0];
                }
                else {
                    return ((NpcServicesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ServiceTypes_NpcServices"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestListRow : global::System.Data.DataRow {
            
            private QuestListDataTable tableQuestList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestList = ((QuestListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableQuestList.IDColumn]));
                }
                set {
                    this[this.tableQuestList.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OBJECT_ID {
                get {
                    try {
                        return ((int)(this[this.tableQuestList.OBJECT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OBJECT_ID\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.OBJECT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLE {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.TITLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TITLE\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.TITLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GREETING_TEXT {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.GREETING_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GREETING_TEXT\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.GREETING_TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBJECTIVES_TEXT {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.OBJECTIVES_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OBJECTIVES_TEXT\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.OBJECTIVES_TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string START_FROM {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.START_FROMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'START_FROM\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.START_FROMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DELIVER_TO {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.DELIVER_TOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELIVER_TO\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.DELIVER_TOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LEVEL {
                get {
                    try {
                        return ((int)(this[this.tableQuestList.LEVELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LEVEL\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.LEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINK {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.LINKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINK\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.LINKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BONUS_SPELL {
                get {
                    try {
                        return ((string)(this[this.tableQuestList.BONUS_SPELLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BONUS_SPELL\' in table \'QuestList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestList.BONUS_SPELLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow GameObjectsRow {
                get {
                    return ((GameObjectsRow)(this.GetParentRow(this.Table.ParentRelations["FK_GameObjects_QuestList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GameObjects_QuestList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJECT_IDNull() {
                return this.IsNull(this.tableQuestList.OBJECT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJECT_IDNull() {
                this[this.tableQuestList.OBJECT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLENull() {
                return this.IsNull(this.tableQuestList.TITLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLENull() {
                this[this.tableQuestList.TITLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGREETING_TEXTNull() {
                return this.IsNull(this.tableQuestList.GREETING_TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGREETING_TEXTNull() {
                this[this.tableQuestList.GREETING_TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJECTIVES_TEXTNull() {
                return this.IsNull(this.tableQuestList.OBJECTIVES_TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJECTIVES_TEXTNull() {
                this[this.tableQuestList.OBJECTIVES_TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTART_FROMNull() {
                return this.IsNull(this.tableQuestList.START_FROMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTART_FROMNull() {
                this[this.tableQuestList.START_FROMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDELIVER_TONull() {
                return this.IsNull(this.tableQuestList.DELIVER_TOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDELIVER_TONull() {
                this[this.tableQuestList.DELIVER_TOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLEVELNull() {
                return this.IsNull(this.tableQuestList.LEVELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLEVELNull() {
                this[this.tableQuestList.LEVELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINKNull() {
                return this.IsNull(this.tableQuestList.LINKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINKNull() {
                this[this.tableQuestList.LINKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBONUS_SPELLNull() {
                return this.IsNull(this.tableQuestList.BONUS_SPELLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBONUS_SPELLNull() {
                this[this.tableQuestList.BONUS_SPELLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow[] GetQuestItemsRows() {
                if ((this.Table.ChildRelations["FK_QuestList_QuestItems"] == null)) {
                    return new QuestItemsRow[0];
                }
                else {
                    return ((QuestItemsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_QuestList_QuestItems"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestItemsRow : global::System.Data.DataRow {
            
            private QuestItemsDataTable tableQuestItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestItems = ((QuestItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QID {
                get {
                    return ((int)(this[this.tableQuestItems.QIDColumn]));
                }
                set {
                    this[this.tableQuestItems.QIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IDX {
                get {
                    return ((int)(this[this.tableQuestItems.IDXColumn]));
                }
                set {
                    this[this.tableQuestItems.IDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ITEM_TYPE_ID {
                get {
                    return ((int)(this[this.tableQuestItems.ITEM_TYPE_IDColumn]));
                }
                set {
                    this[this.tableQuestItems.ITEM_TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableQuestItems.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'QuestItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestItems.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QTY {
                get {
                    try {
                        return ((int)(this[this.tableQuestItems.QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QTY\' in table \'QuestItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestItems.QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FULL_NAME {
                get {
                    try {
                        return ((string)(this[this.tableQuestItems.FULL_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FULL_NAME\' in table \'QuestItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestItems.FULL_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow QuestListRow {
                get {
                    return ((QuestListRow)(this.GetParentRow(this.Table.ParentRelations["FK_QuestList_QuestItems"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_QuestList_QuestItems"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableQuestItems.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableQuestItems.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTYNull() {
                return this.IsNull(this.tableQuestItems.QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTYNull() {
                this[this.tableQuestItems.QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFULL_NAMENull() {
                return this.IsNull(this.tableQuestItems.FULL_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFULL_NAMENull() {
                this[this.tableQuestItems.FULL_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuestItemTypeRow : global::System.Data.DataRow {
            
            private QuestItemTypeDataTable tableQuestItemType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuestItemTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuestItemType = ((QuestItemTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableQuestItemType.IDColumn]));
                }
                set {
                    this[this.tableQuestItemType.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableQuestItemType.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'QuestItemType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuestItemType.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPENull() {
                return this.IsNull(this.tableQuestItemType.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPENull() {
                this[this.tableQuestItemType.TYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GameObjectsRow : global::System.Data.DataRow {
            
            private GameObjectsDataTable tableGameObjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GameObjectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGameObjects = ((GameObjectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGameObjects.IDColumn]));
                }
                set {
                    this[this.tableGameObjects.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TYPE_ID {
                get {
                    try {
                        return ((int)(this[this.tableGameObjects.TYPE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE_ID\' in table \'GameObjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGameObjects.TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableGameObjects.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'GameObjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGameObjects.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableGameObjects.ZONE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_NAME\' in table \'GameObjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGameObjects.ZONE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FACTION {
                get {
                    try {
                        return ((string)(this[this.tableGameObjects.FACTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FACTION\' in table \'GameObjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGameObjects.FACTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow GameObjectTypesRow {
                get {
                    return ((GameObjectTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_GameObjectTypes_GameObjects"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GameObjectTypes_GameObjects"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow ZoneListRow {
                get {
                    return ((ZoneListRow)(this.GetParentRow(this.Table.ParentRelations["FK_ZoneList_GameObjects"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ZoneList_GameObjects"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPE_IDNull() {
                return this.IsNull(this.tableGameObjects.TYPE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPE_IDNull() {
                this[this.tableGameObjects.TYPE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableGameObjects.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableGameObjects.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_NAMENull() {
                return this.IsNull(this.tableGameObjects.ZONE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_NAMENull() {
                this[this.tableGameObjects.ZONE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFACTIONNull() {
                return this.IsNull(this.tableGameObjects.FACTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFACTIONNull() {
                this[this.tableGameObjects.FACTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow[] GetCoordinatesZoneRows() {
                if ((this.Table.ChildRelations["FK_GameObjects_CoordinatesZone"] == null)) {
                    return new CoordinatesZoneRow[0];
                }
                else {
                    return ((CoordinatesZoneRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GameObjects_CoordinatesZone"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow[] GetNpcServicesRows() {
                if ((this.Table.ChildRelations["FK_GameObjects_NpcServices"] == null)) {
                    return new NpcServicesRow[0];
                }
                else {
                    return ((NpcServicesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GameObjects_NpcServices"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow[] GetQuestListRows() {
                if ((this.Table.ChildRelations["FK_GameObjects_QuestList"] == null)) {
                    return new QuestListRow[0];
                }
                else {
                    return ((QuestListRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GameObjects_QuestList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GameObjectTypesRow : global::System.Data.DataRow {
            
            private GameObjectTypesDataTable tableGameObjectTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GameObjectTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGameObjectTypes = ((GameObjectTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableGameObjectTypes.IDColumn]));
                }
                set {
                    this[this.tableGameObjectTypes.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    return ((string)(this[this.tableGameObjectTypes.TYPEColumn]));
                }
                set {
                    this[this.tableGameObjectTypes.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow[] GetGameObjectsRows() {
                if ((this.Table.ChildRelations["FK_GameObjectTypes_GameObjects"] == null)) {
                    return new GameObjectsRow[0];
                }
                else {
                    return ((GameObjectsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_GameObjectTypes_GameObjects"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NpcServicesRow : global::System.Data.DataRow {
            
            private NpcServicesDataTable tableNpcServices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NpcServicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNpcServices = ((NpcServicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GID {
                get {
                    try {
                        return ((int)(this[this.tableNpcServices.GIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GID\' in table \'NpcServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNpcServices.GIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SERVICE_ID {
                get {
                    try {
                        return ((int)(this[this.tableNpcServices.SERVICE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_ID\' in table \'NpcServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNpcServices.SERVICE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERVICE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableNpcServices.SERVICE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERVICE_NAME\' in table \'NpcServices\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNpcServices.SERVICE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow GameObjectsRow {
                get {
                    return ((GameObjectsRow)(this.GetParentRow(this.Table.ParentRelations["FK_GameObjects_NpcServices"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GameObjects_NpcServices"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow ServiceTypesRow {
                get {
                    return ((ServiceTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_ServiceTypes_NpcServices"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ServiceTypes_NpcServices"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIDNull() {
                return this.IsNull(this.tableNpcServices.GIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIDNull() {
                this[this.tableNpcServices.GIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_IDNull() {
                return this.IsNull(this.tableNpcServices.SERVICE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_IDNull() {
                this[this.tableNpcServices.SERVICE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICE_NAMENull() {
                return this.IsNull(this.tableNpcServices.SERVICE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICE_NAMENull() {
                this[this.tableNpcServices.SERVICE_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoordinatesRow : global::System.Data.DataRow {
            
            private CoordinatesDataTable tableCoordinates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinatesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoordinates = ((CoordinatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZONE_ID {
                get {
                    return ((int)(this[this.tableCoordinates.ZONE_IDColumn]));
                }
                set {
                    this[this.tableCoordinates.ZONE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal X {
                get {
                    try {
                        return ((decimal)(this[this.tableCoordinates.XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'Coordinates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinates.XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Y {
                get {
                    try {
                        return ((decimal)(this[this.tableCoordinates.YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'Coordinates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinates.YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Z {
                get {
                    try {
                        return ((decimal)(this[this.tableCoordinates.ZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Z\' in table \'Coordinates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinates.ZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COORD {
                get {
                    try {
                        return ((string)(this[this.tableCoordinates.COORDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COORD\' in table \'Coordinates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinates.COORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow CoordinatesZoneRow {
                get {
                    return ((CoordinatesZoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_CoordinatesZone_Coordinates"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CoordinatesZone_Coordinates"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableCoordinates.XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableCoordinates.XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableCoordinates.YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableCoordinates.YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZNull() {
                return this.IsNull(this.tableCoordinates.ZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZNull() {
                this[this.tableCoordinates.ZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOORDNull() {
                return this.IsNull(this.tableCoordinates.COORDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOORDNull() {
                this[this.tableCoordinates.COORDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CoordinatesZoneRow : global::System.Data.DataRow {
            
            private CoordinatesZoneDataTable tableCoordinatesZone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CoordinatesZoneRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCoordinatesZone = ((CoordinatesZoneDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableCoordinatesZone.IDColumn]));
                }
                set {
                    this[this.tableCoordinatesZone.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GID {
                get {
                    try {
                        return ((int)(this[this.tableCoordinatesZone.GIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GID\' in table \'CoordinatesZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinatesZone.GIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZONE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCoordinatesZone.ZONE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZONE_NAME\' in table \'CoordinatesZone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCoordinatesZone.ZONE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow GameObjectsRow {
                get {
                    return ((GameObjectsRow)(this.GetParentRow(this.Table.ParentRelations["FK_GameObjects_CoordinatesZone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_GameObjects_CoordinatesZone"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGIDNull() {
                return this.IsNull(this.tableCoordinatesZone.GIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGIDNull() {
                this[this.tableCoordinatesZone.GIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZONE_NAMENull() {
                return this.IsNull(this.tableCoordinatesZone.ZONE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZONE_NAMENull() {
                this[this.tableCoordinatesZone.ZONE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow[] GetCoordinatesRows() {
                if ((this.Table.ChildRelations["FK_CoordinatesZone_Coordinates"] == null)) {
                    return new CoordinatesRow[0];
                }
                else {
                    return ((CoordinatesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CoordinatesZone_Coordinates"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContinentListRowChangeEvent : global::System.EventArgs {
            
            private ContinentListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRowChangeEvent(ContinentListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContinentListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZoneListRowChangeEvent : global::System.EventArgs {
            
            private ZoneListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRowChangeEvent(ZoneListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZoneServicesRowChangeEvent : global::System.EventArgs {
            
            private ZoneServicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRowChangeEvent(ZoneServicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneServicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceTypesRowChangeEvent : global::System.EventArgs {
            
            private ServiceTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRowChangeEvent(ServiceTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestListRowChangeEvent : global::System.EventArgs {
            
            private QuestListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRowChangeEvent(QuestListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestItemsRowChangeEvent : global::System.EventArgs {
            
            private QuestItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRowChangeEvent(QuestItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuestItemTypeRowChangeEvent : global::System.EventArgs {
            
            private QuestItemTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRowChangeEvent(QuestItemTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuestItemTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GameObjectsRowChangeEvent : global::System.EventArgs {
            
            private GameObjectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRowChangeEvent(GameObjectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GameObjectTypesRowChangeEvent : global::System.EventArgs {
            
            private GameObjectTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRowChangeEvent(GameObjectTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GameObjectTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NpcServicesRowChangeEvent : global::System.EventArgs {
            
            private NpcServicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRowChangeEvent(NpcServicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NpcServicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoordinatesRowChangeEvent : global::System.EventArgs {
            
            private CoordinatesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRowChangeEvent(CoordinatesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CoordinatesZoneRowChangeEvent : global::System.EventArgs {
            
            private CoordinatesZoneRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRowChangeEvent(CoordinatesZoneRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CoordinatesZoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591