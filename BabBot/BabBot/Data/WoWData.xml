<wow_data>
  <version name="3.2.2.10505" max_lvl="80">
    <classes>
        <class armory_id="1" long_name="Warrior" name="WARRIOR" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="2" long_name="Paladin" name="PALADIN" tab_1_max="26" tab_2_max="26" tab_3_max="26" />
        <class armory_id="3" long_name="Hunter" name="HUNTER" tab_1_max="26" tab_2_max="27" tab_3_max="28" />
        <class armory_id="4" long_name="Rogue" name="ROGUE" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="5" long_name="Priest" name="PRIEST" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="6" long_name="Death Knight" name="DEATHKNIGHT" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="7" long_name="Shaman" name="SHAMAN" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="8" long_name="Mage" name="MAGE" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="9" long_name="Warlock" name="WARLOCK" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
        <class armory_id="11" long_name="Druid" name="DRUID" tab_1_max="0" tab_2_max="0" tab_3_max="0" />
    </classes>
    <races>
      <race name="NONE" long_name="" id="0" />
      <race name="BLOODELF" long_name="Blood Elf" id="10" />
      <race name="DRAENEI" long_name="Dranei" id="11" />
      <race name="DWARF" long_name="Dwarf" id="3" />
      <race name="GNOME" long_name="Gnome" id="7" />
      <race name="HUMAN" long_name="Human" id="1" />
      <race name="NIGHTELF" long_name="Night Elf" id="4" />
      <race name="ORC" long_name="Orc" id="2" />
      <race name="SCOURGE" long_name="Scourge" id="5" />
      <race name="TAUREN" long_name="Tauren" id="6" />
      <race name="TROLL" long_name="Trol" id="8" />
    </races>
    <continents>
      <continent id="0" name="All" />
      <continent id="1" name="Kalimdor" />
      <continent id="2" name="Azeroth" />
      <continent id="3" name="Expansion01" />
      <continent id="4" name="Northrend" />
    </continents>      
    <lua>
      <!-- SetGlueState -->
      <function name="SetGlueState">
        <parameters>
          1 - realm
          2 - location (US, EU)
          3 - realm type (NORMAL_PVE or others
          3 - Sleeping time if some process pending
        </parameters>
        <return size="6">
          0 - Current Glue Screen
          1 - Pending Glue Screen
          2 - Current Glue Dialog
          3 - Text for Glue Dialog (if any)
          4 - Glue Dialog Parameters (depends of dialog type)
          5 - Is Connected to server
        </return>
        <text>
          <![CDATA[(function()
    local d1, d2, d3
    local found = false

    if (GlueDialog:IsShown()) then
        d1 = GlueDialog.which
        d2 = GlueDialogText:GetText()
        if (GlueDialogHTML:IsShown()) then
            d3 = 'html'
        end
    else
        -- TOS/EULA
        if (TOSFrame:IsShown()) then
            d1 = string.lower(TOSFrame.noticeType)
            local scrollbar = _G[TOSFrame.noticeType .. 'ScrollFrameScrollBar'];
            if (scrollbar:IsShown()) then
                local min, max = scrollbar:GetMinMaxValues()
                scrollbar:SetValue(max)
            end
        else
            -- Realm Selection
            if (RealmList:IsShown()) then
                d1 = 'realmselect'
                d3 = 'not_found'
                for i=1, MAX_REALMS_DISPLAYED, 1 do
                    realmIndex = RealmList.offset + i
                    name, numCharacters, invalidRealm, realmDown = GetRealmInfo(1, realmIndex);
                
                    if (name == '{0}') then
                        if (realmDown) then
                            d3 = 'down'
                        else 
                            if (RealmList.currentRealm ~= realmIndex) then
                                RealmList.refreshTime = {3}

                                prealm = _G['RealmListRealmButton'..RealmList.currentRealm]
                                prealm:UnlockHighlight();

                                realm = _G['RealmListRealmButton'..realmIndex]
                                RealmList.currentRealm = realm:GetID()
		                        RealmList.selectedName = realm.name

                                realm:LockHighlight()
						        RealmListHighlight:SetPoint('TOPLEFT', realm, 'TOPLEFT', 0, 0)
                                RealmListHighlight:Show()
                            end
                        
                            d3 = 'ok'
                        end

                        break;
                    end
                end
            else
                -- Realm Wizard
                if (RealmWizard:IsShown()) then
                    found = false
                    for i = 1, 8 do
                        chkLocationBox = _G['RealmWizardLocationButton' .. i]
                        chkLocationLabel = _G['RealmWizardLocationButton' .. i .. 'Text']
                        chkLocationText = chkLocationLabel:GetText()
                        if (chkLocationText == '{1}') then
                            chkLocationBox:SetChecked(1)
                            RealmWizardLocationButton_OnClick(chkLocationBox.categoryIndex)
            
                            found = true
                        end
                    end

                    if (found) then
                        found = false
                            
                        for i = 1, 4 do
                            checkBox = _G['RealmWizardGameTypeButton'..i]
                            checkLabel = _G['RealmWizardGameTypeButton' .. i .. 'Text']
                            checkText = checkLabel:GetText()
                            if (checkText ~= {2}) then
                                checkBox:SetChecked(0);
                            else
                                checkBox:SetChecked(1);
                                RealmWizardGametypeLabel:SetText(checkText);
                                d3 = 'ok'
                                found = true
                                    
                                break
                            end
                        end

                        if (not found) then
                            d3 = 'type_not_found'
                        end
                    else
                        d3 = 'location_not_found'
                    end
                else
                    -- Patch download
                    if (PatchDownloadUI:IsShown()) then
                        d3 = PatchProgressText:GetText()
                    end
                end
            end
        end
    end

    return CURRENT_GLUE_SCREEN, CURRENT_GLUE_PENDING, d1, d2, d3, IsConnectedToServer()
end)()]]>
        </text>
      </function>

      <!-- SelectCharacter -->
      <function name="SelectCharacter">
        <parameters>
          1 - Character Name
        </parameters>
        <return size="1">
          0 - Character ID in list or null if not found
        </return>
        <text>
          <![CDATA[(function()
  local found = nill
  local numChars = GetNumCharacters();
  for i=1, numChars, 1 do
    local name = GetCharacterInfo(i);
    if (name == '{0}') then
      found = i
      break
    end
  end
  
  if (found) then
    CharacterSelect_SelectCharacter(found)
  end
  return found
end)()]]>
        </text>
      </function>
      
      <!-- SendLogin -->
      <function name="SendLogin">
        <parameters>
          1 - realm
          2 - user
          3 - password
        </parameters>
        <text>
          <![CDATA[(function()
  local realm = AccountLoginRealmName:GetText(serverName);
  if (realm ~= '{0}') then
    AccountLoginRealmName:SetText('{0}')
  end
  
  AccountLoginAccountEdit:SetText('{1}')
  AccountLoginPasswordEdit:SetText('{2}')
  DefaultServerLogin(AccountLoginAccountEdit:GetText(), AccountLoginPasswordEdit:GetText())
end)()]]></text>
      </function>

      <!-- GetCurrentMapContinentId -->
      <function name="GetCurrentMapContinentId">
        <parameters />
        <return size="1">
          0 - Continent ID
        </return>
        <text>
          <![CDATA[(function()
	SetMapToCurrentZone()
	local continent = GetCurrentMapContinent()
	return continent
end)()]]></text>
      </function>
      
      <!-- GetAvailTalentPoints -->
      <function name="GetAvailTalentPoints">
        <parameters />
        <return size="2">
        0 - Number of available talent points
        1 - Number of proffessions slot available
        </return>
        <text><![CDATA[(function()
  return UnitCharacterPoints("player")
end)()]]></text>
      </function>
      
      <!-- LearnTalent -->
      <function name="LearnTalent">
        <parameters>
        1 - Tab ID
        2 - Talent ID
        </parameters>
        <return />
        <text><![CDATA[(function()
    LearnTalent({0}, {1}, false)
end)()]]></text>
      </function>

      <!-- GetTalentInfo -->
      <function name="GetTalentInfo">
        <parameters>
        1 - Tab ID
        2 - Talent ID
        </parameters>
        <return size="10">
          0 - name String - The name of the talent in that tab, 
              or nil if there is no talent with this tab/index combination.
          1 - iconPath String - The path to the icon of the talent, 
            or nil if there is no talent with this tab/index combination.
          2 - tier Integer - The vertical grid position of the talent icon 
              in its talent pane tab, or 1 if there is no talent with this tab/index combination.
          3 - column Integer - The horizontal grid position of the talent 
            icon in its talent pane tab, or 1 if there is no talent with this tab/index combination.
          4 - currentRank Integer - The current rank (currently assigned talent points) 
            of the talent, or 0 (zero) if there is no talent with this tab/index combination.
          5 - maxRank - Integer - The maximum rank (maximum number of talent points) 
            of the talent, or 0 (zero) if there is no talent with this tab/index combination.
          6 - isExceptional 
          7 - meetsPrereq
            Whether the talent's prerequisites are met.
          8 - previewRank
            The rank of this talent in preview mode. If it is not previewed, previewRank == currentRank.
          9 - meetsPreviewPrereq
            Whether the talent's prerequisites in preview mode are met.
        </return>
        <text><![CDATA[(function()
    return GetTalentInfo({0}, {1}, false, false)
end)()]]></text>
      </function>

      <!-- SetTrainerAvailableFilter -->
      <function name="SetTrainerAvailableFilter">
        <text><![CDATA[(function()
  SetTrainerServiceTypeFilter("available" , 1, 1)
end)()]]></text>
      </function>

      <!-- GetNumTrainerServices -->
	    <function name="GetNumTrainerServices">
        <return size="1">
		  0 - the number of entries in the trainer service listing. 
			Entries include both group headers and individual trainer services 
			(i.e spells or recipes to be purchased). Reflects the list as it should 
			currently be displayed, not necessarily the complete list -- if headers 
			are collapsed or a filter is enabled, a smaller number will be returned
        </return>
        <text><![CDATA[(function()
  return GetNumTrainerServices()
end)()]]></text>
      </function>

      <!-- BuyTrainerService -->
	    <function name="BuyTrainerService">
        <parameters>
		  0 - Index of the trainer service
        </parameters>
        <text><![CDATA[(function()
  BuyTrainerService({0})
end)()]]></text>
      </function>

      <!-- GetGossipOptions -->
      <function name="GetGossipOptions">
        <return size="-1">
          * text - Text to be displayed for the gossip option (string)
          * gossipType - Non-localized string indicating the type of gossip option (string)
            o Banker - Begin a Bank interaction
            o BattleMaster - Queue for a battleground instance
            o Binder - Set the player's Hearthstone location
            o Gossip - Talk to the NPC
            o Tabard - Begin a Tabard design interaction
            o Taxi - Begin a Taxi (flight master) interaction
            o Trainer - Begin a Trainer interaction
            o Vendor - Begin a Merchant interaction
          *
          ... - Additional text, gossipType values for each gossip option available (list)

        </return>
        <text>
          <![CDATA[(function()
  return GetGossipOptions()
end)()]]>
        </text>
    </function>

    <!-- ChooseGossipOption -->
    <function name="ChooseGossipOption">
        <parameters>
          0 - "gossip" index (see FindGossipIndex)
        </parameters>
        <text><![CDATA[(function()
  SelectGossipOption({0})
end)()]]></text>
      </function>
	  
      <!-- FindGossipIndex -->
      <function name="FindGossipIndex">
        <parameters>
		0 - gossipType - Non-localized string indicating the type of gossip option (string)
    * banker - Begin a Bank interaction
    * battleMaster - Queue for a battleground instance
    * binder - Set the player's Hearthstone location
    * gossip - Talk to the NPC
    * tabard - Begin a Tabard design interaction
    * taxi - Begin a Taxi (flight master) interaction
    * trainer - Begin a Trainer interaction
    * vendor - Begin a Merchant interaction
	* gossip
		- Custom gossip types
        </parameters>
        <return size="1">
		0 - index if gossip type found in NPC gossip dialog or null if not found
        </return>
        <text><![CDATA[(function()
	local idx, txt
    local arg = GetGossipOptions()
	for i = 1, table.getn(arg), 2 do
		local title, type = arg[i], arg[i+1]
		if (type == "{0}) then
			idx = i
			txt = title
			
			break
		end
	end
	return idx, txt
end)()]]></text>
      </function>
      
      <!-- InteractUnit-->
      <function name="InteractWithTarget">
        <text>
          <!-- Unit should be targeted before call this function -->
          <![CDATA[InteractUnit("target")]]>
        </text>
      </function>
      
      <!-- GetVendorInfo -->
      <function name="GetVendorInfo">
      <!-- Player should be interacting with vendor before call this function -->
        <return size="3">
        0 - Is Vendor can repear
        1 - Does Vendor has water
        2 - Does Vendor has food
        </return>
        <text><![CDATA[(function()
  local hasWater, hasFood
  local canRepair = CanMerchantRepair()
  
  ; TODO Check for water & food
  return canRepair, hasWater, hasFood
end)()]]></text>
      </function>

      <!-- UnitClass -->
      <function name="GetUnitInfo">
        <parameters>
          0 - unit String - the unitId to query, e.g. "player"
        </parameters>
        <return size="5">
        </return>
        0 - localized class
        The localized class of the specified unit as a string. e.g. "Mage", "Warrior", "Guerrier", etc.

        1 - english class
        The fully capitalized english class name with no spaces, e.g. "MAGE", "WARRIOR", "DEATHKNIGHT", etc.

        2 - localized race
        
        3 - english race (TROLL, HUMAN)
        
        4 - gender - The unit's gender (number)
          o 1 - Neuter / Unknown
          o 2 - Male
          o 3 - Female

        <text>
          <![CDATA[(function()
  class1, class2 = UnitClass("{0}")
  race1, race2 = UnitRace("{0}")
  
  return class1, class2, race1, string.upper(race2),  UnitSex("{0}")
end)()]]>
        </text>
      </function>
      
      <!-- IsGossipFrameOpen -->
      <function name="IsGossipFrameOpen">
        <return size="1">
        0 - 1 if GossipFrame is shown and null if not (yet)
        </return>
        <text><![CDATA[(function()
  return GossipFrame:IsShown()
end)()]]></text>
      </function>

      <function name="GetAvailQuests">
        <return size="-1">
          *  name - Name of the quest (string)
          * level - Suggested character level for attempting the quest (number)
          * isTrivial - 1 if the quest is considered "trivial" at the player's level (rewards no XP); otherwise nil (1nil)
          * ... - Additional name, level, isTrivial values if more than one quest is active (list)

        </return>
        <text>
          <![CDATA[(function()
      return GetGossipAvailableQuests()
      end)()]]>
        </text>
      </function>

      <!-- GetZoneText -->
      <function name="GetZoneText">
        <return size="1">
          zoneName
          String - zone name (localized).
        </return>
        <text>
          <![CDATA[(function()
  return GetZoneText()
end)()]]>
        </text>
      </function>
      
      <!-- IsGossipFrameOpen -->
      <function name="IsNpcFrameOpen">
        <return size="4">
          0 - type of chosen gossip service as:
            * "wep_skill_trainer" - SkillFrame (weapon skills)
            * "class_trainer" - ClassTrainerFrame
            * "trade_skill_trainer" - TradeSkillFrame
            * "taxi" - TaxiFrame
            * "vendor" - MerchantFrame
            * "banker" - BankFrame
            * "battlemaster" - BattlefieldFrame ??

          or null if it not shown (yet)
          1..3 - Optional service information:
            * vendor -
              1 - can vendor repair
              2 - Is vendor has water
              3 - Is vendor has food

              At the moment it doesn't distinguish food and drink 
              since it's the same subcategory
              
            * quest -
              1 - quest header in format according "quests.header_pattern" below:
                quest level::quest title::quest text
              2 - general quest info in format according "quests.info_pattern" below:
                Learned Spell::isTradeskillSpell::isSpellLearned::
                  NumQuestItems::NumQuestRewards::NumQuestChoices
              3 - details about each quest type ("required", "reward", "choice")
                in format according "quests.details_pattern" below:
              qty::name::qty::name||..||..

        </return>
        <text>
              <![CDATA[(function()
  local service, d1, d2, d3
  if (GossipFrame:IsShown()) then
    service = "gossip"
  else 
    if (TaxiFrame:IsShown()) then
      service = "taxi"
      CloseTaxiMap();
    else 
      if (MerchantFrame:IsShown()) then
        service = "vendor"
        -- check for repair
        d1 = CanMerchantRepair()
        -- check for water/food
        max_num = GetMerchantNumItems()
        for i = 1, max_num do
          name, link, quality, iLevel, reqLevel, class, subclass, 
            maxStack, equipSlot, texture, vendorPrice = GetItemInfo(GetMerchantItemLink(i));
          if (subclass == "Food & Drink") then
            d2 = 1
            d3 = 1
            
            break
          end
        end
        -- done with merchant
        CloseMerchant();
      else 
        if (BankFrame:IsShown()) then
          service = "banker"
          CloseBankFrame()
        else
          if (SkillFrame:IsShown()) then
            service = "wep_skill_trainer"
          else
            if (ClassTrainerFrame:IsShown()) then
              service = "class_trainer"
              CloseTrainer()
            else
              if (TradeSkillFrame:IsShown()) then
                service = "trade_skill_trainer"
                CloseTradeSkill()
              else
                if (BattlefieldFrame:IsShown()) then
                  service = "battlemaster"
                  CloseBattlefield()
                else
                  if (QuestFrame:IsShown()) then
                    service = "quest"
                    
                    -- Returning quest level as char level
                    d1 = UnitLevel("player") .. "::" .. GetTitleText() .. 
                      "::" .. GetQuestText() .. "::" .. GetObjectiveText()
                    
                    q = {"required", "reward", "choice"}
                    
                    -- Get quest details
                    qr = {}
                    qr[1] = GetNumQuestItems()
                    qr[2] = GetNumQuestRewards()
                    qr[3] = GetNumQuestChoices()
                    
                    texture, name, isTradeskillSpell, isSpellLearned = GetRewardSpell()
                    if (name) then
                      d2 = name .. "::" .. isTradeskillSpell .. "::" .. isSpellLearned
                    else
                      d2 = "::::";
                    end
                    
                    d3 = ""
                    for i = 1, 3 do
                      d2 = d2 .. "::" .. qr[i]
                      if (i > 1) then
                        d3 = d3 .. "||"
                      end
                      
                      s = ""
                      for j = 1, qr[i] do
                        if (s ~= "") then
                          s = s.."::"
                        end
                        
                        name, texture, qty = GetQuestItemInfo(q[i], j)
                        s = s .. qty .. "," .. name
                      end
                      
                      d3 = d3 .. s
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  
  return service, d1, d2, d3
end)()]]></text>
      </function>
      
      <!-- GetNpcInfo -->
      <function name="GetNpcGossipInfo">
        <parameters>
        </parameters>
        <return size="3">
        0 - number of available quests
        1 - number of active quests
        2 - number of services
        </return>
        <text><![CDATA[(function()
  return GetNumGossipAvailableQuests(), GetNumGossipActiveQuests(), GetNumGossipOptions()
end)()]]></text>
      </function>

      <!-- Template for new function
      <!- - name - ->
      <function name="">
        <parameters>
        </parameters>
        <return size="">
        </return>
        <text><![CDATA[(function()
  
end)()]]></text>
      </function>
      -->
	  
    </lua>
    
    <!-- 
      "delay" parameter define delay between learning each talent from list
       "retry" parameters control how many retries need if learning too fast
    -->
    <talents lvl_start="10" delay="1000" retry="5"
      armory_pattern="^http://www.wowarmory.com/talent-calc.xml\?cid=(\d)\&amp;tal=(\d+)$" />
    <quests header_pattern="^\d+::.*::.*$" info_pattern="^.*,1?,1?,\d+,\d+,\d+$" 
            detail_pattern="^\.*||.*||.*$" />
    3 - details about each quest type ("required", "reward", "choice")
    in format according "quests.details_pattern" below:
    [[qty, name],[qty, name]][[..],[..]][]
  </version>
</wow_data>